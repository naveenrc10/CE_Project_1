pipeline {
    agent any
    parameters {
        string(name: 'AZURE_SUBSCRIPTION_ID', defaultValue: '540d323c-567f-436f-bc90-d46ddb6bd027', description: 'Azure Subscription ID')
    }
    environment {
        AZURE_APP_ID     = credentials('AZURE_APP_ID')
        AZURE_PASSWORD   = credentials('AZURE_PASSWORD')
        AZURE_TENANT_ID  = credentials('AZURE_TENANT_ID')
        
    }
    stages {
        stage('Azure Login') {
            steps {
                sh """
                    az login --service-principal \
                        -u $AZURE_APP_ID \
                        -p $AZURE_PASSWORD \
                        --tenant $AZURE_TENANT_ID

                    az account set --subscription $AZURE_SUBSCRIPTION_ID
                """
            }
        }
        stage('Check Resources') {
            steps {
                    sh '''
                    RESOURCE_GROUP="terraform-rg"
                    STORAGE_ACCOUNT="tfstatenaveen12345"
                    CONTAINER_NAME="terraform-state"

                    # Check if Resource Group exists
                    RG_EXISTS=$(az group exists --name $RESOURCE_GROUP)

                    if [ "$RG_EXISTS" = "false" ]; then
                        echo "Creating Resource Group: $RESOURCE_GROUP"
                        az group create --name $RESOURCE_GROUP --location eastus
                    else
                        echo "Resource Group already exists."
                    fi

                    # Check if Storage Account exists
                    SA_EXISTS=$(az storage account show --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP --query "name" --output tsv 2>/dev/null || true)
                    if [ -z "$SA_EXISTS" ]; then
                        echo "Creating Storage Account: $STORAGE_ACCOUNT"
                        az storage account create --name $STORAGE_ACCOUNT --resource-group $RESOURCE_GROUP --sku Standard_LRS --encryption-services blob
                    else
                        echo "Storage Account already exists"
                    fi

                    # Check if Container exists
                    CONTAINER_EXISTS=$(az storage container show --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT --query "name" --output tsv 2>/dev/null || true)

                    if [ -z "$CONTAINER_EXISTS" ]; then
                        echo "Creating Storage Container: $CONTAINER_NAME"
                        az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT
                    else
                        echo "Storage Container already exists."
                    fi
                    '''
            }
            
            
         
        }
        stage('Terraform Refresh') {
            steps {
                    sh '''
                        cd azure_infra_setup
                        #sed -i "s/AZURE_APP_ID/$AZURE_APP_ID/g" provider.tf 
                        #sed -i "s/AZURE_PASSWORD/$AZURE_PASSWORD/g" provider.tf
                        #sed -i "s/AZURE_TENANT_ID/$AZURE_TENANT_ID/g" provider.tf
                        #sed -i "s/AZURE_SUBSCRIPTION_ID/$AZURE_SUBSCRIPTION_ID/g" provider.tf
                        cat ~/.ssh/id_rsa.pub
                        terraform init -reconfigure
                        terraform plan
                        #terraform apply -auto-approve
                    '''
            }
        }
    }
}